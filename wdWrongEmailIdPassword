group :test, :development do
  # These are the target gems of this tutorial
  gem 'rspec-rails', '~> 2.12'
  gem 'sauce', '~> 3.1.1'
  gem 'sauce-connect'
  gem 'capybara', '~> 2.0.3'
  gem 'parallel_tests'
end


require "json"
require "selenium-webdriver"
gem "test-unit"
require "test/unit"

class One < Test::Unit::TestCase

  def setup
    @driver = Selenium::WebDriver.for :firefox
    @base_url = "http://caregeneral.net/"
    @accept_next_alert = true
    @driver.manage.timeouts.implicit_wait = 30
    @verification_errors = []
  end
  
  def teardown
    @driver.quit
    assert_equal [], @verification_errors
  end
  
  def test_one
    # setSpeed | 0 | 
    # ERROR: Caught exception [ERROR: Unsupported command [setSpeed | 0 | ]]
    # open | /login | 
    @driver.get(@base_url + "/login")

    # type | id=user_email | neerajdnjj@gmail.com
    @driver.find_element(:id, "user_email").clear
    @driver.find_element(:id, "user_email").send_keys "neerajdnjj@gmail.com"

    # type | id=user_password | welcome
    @driver.find_element(:id, "user_password").clear
    @driver.find_element(:id, "user_password").send_keys "welcome"

    # click | css=button.common-btn |
    @driver.find_element(:css, "button.common-btn").click

    # verifyText | css=div.alert.fade.in.alert-danger.alert-dismissable | ×Invalid email or password.
    verify { assert_equal "×\nInvalid email or password.", @driver.find_element(:css, "div.alert.fade.in.alert-danger.alert-dismissable").text }

    # click | css=button.close |
    @driver.find_element(:css, "button.close").click

    # type | id=user_email | neeraj12@bigbinary.com
    @driver.find_element(:id, "user_email").clear
    @driver.find_element(:id, "user_email").send_keys "neeraj12@bigbinary.com"

    # type | id=user_password | welcomee
    @driver.find_element(:id, "user_password").clear
    @driver.find_element(:id, "user_password").send_keys "welcomee"

    # click | css=button.common-btn |
    @driver.find_element(:css, "button.common-btn").click

    # verifyText | css=div.alert.fade.in.alert-danger.alert-dismissable | ×Invalid email or password.
    verify { assert_equal "×\nInvalid email or password.", @driver.find_element(:css, "div.alert.fade.in.alert-danger.alert-dismissable").text }

    # click | css=button.close |
    @driver.find_element(:css, "button.close").click

  end
  
   def test_two
    # open | /login | 
    @driver.get(@base_url + "/login")
    
    # verifyElementPresent | css=a.logo.navbar-brand | 
    verify { assert element_present?(:css, "a.logo.navbar-brand") }
    
    # verifyText | css=h1.page-title | Account login
    verify { assert_equal "ACCOUNT LOGIN", @driver.find_element(:css, "h1.page-title").text }
    
    # verifyText | id=user_email | 
    verify { assert_equal "", @driver.find_element(:id, "user_email").text }
    
    # assertText | id=user_password | 
    assert_equal "", @driver.find_element(:id, "user_password").text
    
    # verifyText | link=Forgot Password | Forgot Password
    verify { assert_equal "Forgot Password", @driver.find_element(:link, "Forgot Password").text }
    
    # verifyText | link=Didn't receive unlock instructions? | exact:Didn't receive unlock instructions?
    verify { assert_equal "Didn't receive unlock instructions?", @driver.find_element(:link, "Didn't receive unlock instructions?").text }
    
    # verifyText | link=Contact Us | Contact Us
    verify { assert_equal "Contact Us", @driver.find_element(:link, "Contact Us").text }
    
    # verifyText | css=button.common-btn | Login
    verify { assert_equal "LOGIN", @driver.find_element(:css, "button.common-btn").text }
    
    # verifyText | id=badge-app-store | 
    verify { assert_equal "", @driver.find_element(:id, "badge-app-store").text }
    
    # verifyText | link=Text me the link | Text me the link
    verify { assert_equal "Text me the link", @driver.find_element(:link, "Text me the link").text }
    
    # verifyText | link=Privacy Policy | Privacy Policy
    verify { assert_equal "Privacy Policy", @driver.find_element(:link, "Privacy Policy").text }
    
    # verifyText | link=Terms of Service | Terms of Service
    verify { assert_equal "Terms of Service", @driver.find_element(:link, "Terms of Service").text }
    
    # type | id=user_email | prabhakar+superadmin@bigbinary.com
    @driver.find_element(:id, "user_email").clear
    @driver.find_element(:id, "user_email").send_keys "prabhakar+superadmin@bigbinary.com"
    
    # type | id=user_password | welcome
    @driver.find_element(:id, "user_password").clear
    @driver.find_element(:id, "user_password").send_keys "welcome"
    
    # click | css=button.common-btn | 
    @driver.find_element(:css, "button.common-btn").click
    
    # verifyText | css=span.user_name | prabhakar+superadmin
    verify { assert_equal "prabhakar+superadmin", @driver.find_element(:css, "span.user_name").text }
    
    # verifyText | link=My Info | My Info
    # wait.until { @driver.find_element(:css, ".user_subnav>li>a[title=\"My Info\"]").text}
    # verify { assert_equal "My Info", @driver.find_element(:link, "My Info").text }
    # verify { assert_equal "My Info", @driver.find_element(:css, "a[title=\"My Info\"]").text }
    # verify { assert_equal "My Info", @driver.find_element(:xpath, "/nav/div[2]/ul[2]/li/ul/li[1]/a[title=\"My Info\"]").text }

    verify { assert_equal "My Info", @driver.find_element(:xpath, '//a[contains(@href, "profile")]').text }

    # verifyText | css=a[title="Translations"] | Translations
    verify { assert_equal "Translations", @driver.find_element(:css, "a[title=\"Translations\"]").text }
    
    # verifyText | link=Super Admin | Super Admin
    verify { assert_equal "Super Admin", @driver.find_element(:link, "Super Admin").text }
    
    # verifyText | link=Admin | Admin
    verify { assert_equal "Admin", @driver.find_element(:link, "Admin").text }
    
    # verifyText | link=Help | Help
    verify { assert_equal "Help", @driver.find_element(:link, "Help").text }
    
    # verifyText | css=a.intercom | Support
    verify { assert_equal "Support", @driver.find_element(:css, "a.intercom").text }
    
    # verifyText | link=Getting Started | Getting Started
    verify { assert_equal "Getting Started", @driver.find_element(:link, "Getting Started").text }
    
    # verifyText | link=Get Mobile App | Get Mobile App
    verify { assert_equal "Get Mobile App", @driver.find_element(:link, "Get Mobile App").text }
    
    # verifyText | link=Contact Us | Contact Us
    verify { assert_equal "Contact Us", @driver.find_element(:link, "Contact Us").text }
    
    # verifyText | link=Feedback and Suggestions | Feedback and Suggestions
    verify { assert_equal "Feedback and Suggestions", @driver.find_element(:link, "Feedback and Suggestions").text }
    
    # verifyText | link=Change Language | Change Language
    verify { assert_equal "Change Language", @driver.find_element(:link, "Change Language").text }
    
    # verifyText | link=Log Out | Log Out
    verify { assert_equal "Log Out", @driver.find_element(:link, "Log Out").text }
  end


  def element_present?(how, what)
    @driver.find_element(how, what)
    true
  rescue Selenium::WebDriver::Error::NoSuchElementError
    false
  end
  
  def alert_present?()
    @driver.switch_to.alert
    true
  rescue Selenium::WebDriver::Error::NoAlertPresentError
    false
  end
  
  def verify(&blk)
    yield
  rescue Test::Unit::AssertionFailedError => ex
    @verification_errors << ex
  end
  
  def close_alert_and_get_its_text(how, what)
    alert = @driver.switch_to().alert()
    alert_text = alert.text
    if (@accept_next_alert) then
      alert.accept()
    else
      alert.dismiss()
    end
    alert_text
  ensure
    @accept_next_alert = true
  end
end
